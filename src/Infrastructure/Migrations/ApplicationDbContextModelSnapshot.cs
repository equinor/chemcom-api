// <auto-generated />
using System;
using Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Attachments.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ShipmentId" }, "IX_Attachments_ShipmentId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Domain.Chemicals.Chemical", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BiocideWeight")
                        .HasColumnType("float");

                    b.Property<double>("Density")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("FollowOilPhaseDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("FollowWaterPhaseDefault")
                        .HasColumnType("bit");

                    b.Property<string>("HazardClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasureUnitDefault")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NitrogenWeight")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Proposed")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProposedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProposedByEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProposedByInstallationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProposedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Tentative")
                        .HasColumnType("bit");

                    b.Property<double>("TocWeight")
                        .HasColumnType("float");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProposedByInstallationId" }, "IX_Chemicals_ProposedByInstallationId");

                    b.ToTable("Chemicals");
                });

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ShipmentId" }, "IX_Comments_ShipmentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.FieldChanges.FieldChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FromField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LogId");

                    b.ToTable("FieldChange");
                });

            modelBuilder.Entity("Domain.InstallationPlants.InstallationPlant", b =>
                {
                    b.Property<Guid>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InstallationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlantId", "InstallationId");

                    b.HasIndex("InstallationId");

                    b.ToTable("InstallationPlants");
                });

            modelBuilder.Entity("Domain.Installations.Installation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstallationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Nitrogen")
                        .HasColumnType("float");

                    b.Property<double>("NitrogenCapacity")
                        .HasColumnType("float");

                    b.Property<Guid?>("ShipsToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Terms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Toc")
                        .HasColumnType("float");

                    b.Property<double>("TocCapacity")
                        .HasColumnType("float");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Water")
                        .HasColumnType("float");

                    b.Property<double>("WaterCapacity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ShipsToId" }, "IX_Installations_ShipsToId");

                    b.ToTable("Installations");
                });

            modelBuilder.Entity("Domain.LogEntries.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InstallationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstallationId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("LogEntry");
                });

            modelBuilder.Entity("Domain.ShipmentChemicals.ShipmentChemical", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("CalculatedBiocides")
                        .HasColumnType("float");

                    b.Property<double>("CalculatedBiocidesUnrinsed")
                        .HasColumnType("float");

                    b.Property<double>("CalculatedNitrogen")
                        .HasColumnType("float");

                    b.Property<double>("CalculatedNitrogenUnrinsed")
                        .HasColumnType("float");

                    b.Property<double>("CalculatedToc")
                        .HasColumnType("float");

                    b.Property<double>("CalculatedTocUnrinsed")
                        .HasColumnType("float");

                    b.Property<double>("CalculatedWeight")
                        .HasColumnType("float");

                    b.Property<double>("CalculatedWeightUnrinsed")
                        .HasColumnType("float");

                    b.Property<Guid>("ChemicalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.HasIndex(new[] { "ChemicalId" }, "IX_ShipmentChemicals_ChemicalId");

                    b.ToTable("ShipmentChemicals");
                });

            modelBuilder.Entity("Domain.ShipmentParts.ShipmentPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Shipped")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Water")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ShipmentParts");
                });

            modelBuilder.Entity("Domain.Shipments.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AvailableForDailyContact")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ContainsBiocides")
                        .HasColumnType("bit");

                    b.Property<bool>("ContainsChemicals")
                        .HasColumnType("bit");

                    b.Property<bool>("ContainsHighParticleAmount")
                        .HasColumnType("bit");

                    b.Property<bool>("ContainsStableOilEmulsion")
                        .HasColumnType("bit");

                    b.Property<bool?>("EvalAmountOk")
                        .HasColumnType("bit");

                    b.Property<string>("EvalAmountOkUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EvalBiocidesOk")
                        .HasColumnType("bit");

                    b.Property<string>("EvalBiocidesOkUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EvalCapacityOk")
                        .HasColumnType("bit");

                    b.Property<string>("EvalCapacityOkUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EvalContaminationRisk")
                        .HasColumnType("bit");

                    b.Property<string>("EvalContaminationRiskUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvalEnvImpact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasBeenOpened")
                        .HasColumnType("bit");

                    b.Property<bool>("HeightenedLra")
                        .HasColumnType("bit");

                    b.Property<bool?>("NormalProcedure")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnlyWayToGetRidOf")
                        .HasColumnType("bit");

                    b.Property<string>("OnlyWayToGetRidOfComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Pb210")
                        .HasColumnType("float");

                    b.Property<DateTime>("PlannedExecutionFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedExecutionTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Precautions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Ra226")
                        .HasColumnType("float");

                    b.Property<double?>("Ra228")
                        .HasColumnType("float");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RinsingOffshorePercent")
                        .HasColumnType("float");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TakePrecaution")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VolumeHasBeenMinimized")
                        .HasColumnType("bit");

                    b.Property<string>("VolumeHasBeenMinimizedComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VolumePersentageOffspec")
                        .HasColumnType("bit");

                    b.Property<double>("WaterAmount")
                        .HasColumnType("float");

                    b.Property<double>("WaterAmountPerHour")
                        .HasColumnType("float");

                    b.Property<bool>("WaterHasBeenAnalyzed")
                        .HasColumnType("bit");

                    b.Property<string>("Well")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ReceiverId" }, "IX_Shipments_ReceiverId");

                    b.HasIndex(new[] { "SenderId" }, "IX_Shipments_SenderId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("Domain.Attachments.Attachment", b =>
                {
                    b.HasOne("Domain.Shipments.Shipment", "Shipment")
                        .WithMany("Attachments")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Domain.Chemicals.Chemical", b =>
                {
                    b.HasOne("Domain.Installations.Installation", "ProposedByInstallation")
                        .WithMany("Chemicals")
                        .HasForeignKey("ProposedByInstallationId");

                    b.Navigation("ProposedByInstallation");
                });

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.HasOne("Domain.Shipments.Shipment", "Shipment")
                        .WithMany("Comments")
                        .HasForeignKey("ShipmentId");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Domain.FieldChanges.FieldChange", b =>
                {
                    b.HasOne("Domain.LogEntries.LogEntry", "Log")
                        .WithMany("FieldChanges")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Log");
                });

            modelBuilder.Entity("Domain.InstallationPlants.InstallationPlant", b =>
                {
                    b.HasOne("Domain.Installations.Installation", "Installation")
                        .WithMany("ShipsToPlant")
                        .HasForeignKey("InstallationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Installations.Installation", "Plant")
                        .WithMany("GetsShipmentsFromInstallation")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Installation");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Domain.Installations.Installation", b =>
                {
                    b.HasOne("Domain.Installations.Installation", "ShipsTo")
                        .WithMany("GetsShipmentsFrom")
                        .HasForeignKey("ShipsToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ShipsTo");
                });

            modelBuilder.Entity("Domain.LogEntries.LogEntry", b =>
                {
                    b.HasOne("Domain.Installations.Installation", "Installation")
                        .WithMany()
                        .HasForeignKey("InstallationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Shipments.Shipment", "Shipment")
                        .WithMany("LogEntries")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Installation");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Domain.ShipmentChemicals.ShipmentChemical", b =>
                {
                    b.HasOne("Domain.Chemicals.Chemical", "Chemical")
                        .WithMany("ShipmentChemicals")
                        .HasForeignKey("ChemicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Shipments.Shipment", "Shipment")
                        .WithMany("Chemicals")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chemical");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Domain.ShipmentParts.ShipmentPart", b =>
                {
                    b.HasOne("Domain.Shipments.Shipment", "Shipment")
                        .WithMany("ShipmentParts")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Domain.Shipments.Shipment", b =>
                {
                    b.HasOne("Domain.Installations.Installation", "Receiver")
                        .WithMany("ReceivedShipments")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Installations.Installation", "Sender")
                        .WithMany("SentShipments")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Domain.Chemicals.Chemical", b =>
                {
                    b.Navigation("ShipmentChemicals");
                });

            modelBuilder.Entity("Domain.Installations.Installation", b =>
                {
                    b.Navigation("Chemicals");

                    b.Navigation("GetsShipmentsFrom");

                    b.Navigation("GetsShipmentsFromInstallation");

                    b.Navigation("ReceivedShipments");

                    b.Navigation("SentShipments");

                    b.Navigation("ShipsToPlant");
                });

            modelBuilder.Entity("Domain.LogEntries.LogEntry", b =>
                {
                    b.Navigation("FieldChanges");
                });

            modelBuilder.Entity("Domain.Shipments.Shipment", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Chemicals");

                    b.Navigation("Comments");

                    b.Navigation("LogEntries");

                    b.Navigation("ShipmentParts");
                });
#pragma warning restore 612, 618
        }
    }
}
